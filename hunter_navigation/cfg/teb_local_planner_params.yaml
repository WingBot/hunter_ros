TebLocalPlannerROS:

# 关闭多路径并行规划（效果非常显著）
# 使用Costmap Converter （非常显著）
# 降低迭代次数（no_inner/outer_iterations） （显著）
# 降低 max_lookahead_distance （一般）
# 减小局部耗费地图的大小 （显著）
# 增大规划周期和控制周期 （影响效果）
# 使用单点footprint，配合最小障碍物距离约束 （不太显著且影响效果）



 odom_topic: odom
    
 # Trajectory
  
 teb_autosize: True     # 优化期间允许改变轨迹的时域长度
 dt_ref: 0.8   # 0.3  局部路径规划的解析度 [0.01,1.0]
 dt_hysteresis: 0.1   # 允许改变的时域解析度的浮动范围， 一般为 dt_ref 的 10% 左右; [0.002,0.5]
#  TEB通过状态搜索树寻找最优路径，而dt_ref则是最优路径上的两个相邻姿态
# （即位置、速度、航向信息，可通过TEB可视化在rivz中看到）的默认距离。此距
# 离不固定，规划器自动根据速度大小调整这一距离，速度越大，相邻距离自然越大。
# 笔者认为，将dt_ref设置为与车辆长度大致是可行的。较小的值理论上可提供更高
# 精度，但笔者并未进行验证。对于一般的模型车而言，不需要改变默认配置。当相邻
# 姿态距离和dt_ref的差超过正负dt_hysteresis时，规划器将改变这一距离。

 max_samples: 200 #500
 global_plan_overwrite_orientation: True
 # True时，规划局部路径时会覆盖掉全局路径点的方位角。
#  覆盖全局路径的方向是预留给3D路径规划使用的。对于车辆的2D规划，
 # 可以设置为False，可实现对全局路径的更好跟踪。
 allow_init_with_backwards_motion: False # True 在目标在本地成本图中落后于起点的情况下，可以使用向后运动来初始化基础轨迹,机器人配备了后部传感器的情况下才建议
 max_global_plan_lookahead_dist: 5.0
 #  最大向前看距离。考虑优化的全局计划子集的最大长度（累积欧几里得距离）（如果为0或负数：禁用；长度也受本地Costmap大小的限制） [0,50]
 # 1.应随车辆最大速度的增大而增大
 # 2.不应超过激光雷达等传感器的可靠测量范围 
 # 3. 不应超过局部耗费地图的大小，即不能要求TEB对局部耗费地图以外的部分进行规划。
 global_plan_viapoint_sep: -1 # 从全局计划中提取的每两个连续通过点之间的最小间隔[如果为负：禁用]
#  从全局规划路径中提取的路点的相互距离。默认设置下为Disable，
#  即只沿全局规划向前寻找，找到的离开局部规划器规划范围前的最后
#  一个点作为局部目标。若全局规划特殊，在无障碍空间仍不走直线
#  （例如，工作中的扫地机器人），则需要将此值设置为设置为一个小的正数。
 global_plan_prune_distance: 1
 exact_arc_length: False      # 如果为真，规划器在速度、加速度和转弯率计算中使用精确的弧长[->增加的CPU时间]，否则使用欧几里德近似
 feasibility_check_no_poses: 2 # 检测位姿可到达的时间间隔 [0,50]
 publish_feedback: False   # 发布包含完整轨迹和活动障碍物列表的规划器反馈
#  via_points_ordered: False # 如果为真，规划器遵循存储容器中通过点的顺序。
#  is_footprint_dynamic: False # 是否footprint 为动态的，如果为true，则在检查轨迹可行性之前更新覆盖区

 # Robot
         
 max_vel_x: 0.5
 max_vel_x_backwards: 0.5
 acc_lim_x: 0.5

 max_vel_y: 0.0

 max_vel_theta: 0.2 # the angular velocity is also bounded by min_turning_radius in case of a carlike robot (r = v / omega)
 acc_lim_theta: 0.2 #而角速度限制应作用在车辆高速行驶时。角速度约束可以防止高重心转弯过快翻车，角加速度限制可以避免车轮打滑，
 #车辆失控。对于低速平稳运行的车辆可以不约束此两项，将二者设为一个足够大的值即可。

 # ********************** Carlike robot parameters ********************
# min_turning_radius 正确配置下最小转弯半径应在低速时生效,有些车辆转向性能不佳，前轮实际转过角度小于舵机角度，则应当给指令转角乘上一增益后再控制舵机，否则车辆将总是不能实现设置的最小转弯半径。请注意此项应当与最大角速度配合设置。
 min_turning_radius: 2.0  #1.7       # Min turning radius of the carlike robot (compute value using a model or adjust with rqt_reconfigure manually)
 wheelbase: 0.648                 # Wheelbase of our robot
 cmd_angle_instead_rotvel: True # stage simulator takes the angle instead of the rotvel as input (twist message)
 # ********************************************************************

 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "polygon"
   radius: 0.2 # for type "circular"
   line_start: [0.0, 0.0] # for type "line"
   line_end: [0.648, 0.0] # for type "line"
   front_offset: 0.2 # for type "two_circles"
   front_radius: 0.2 # for type "two_circles"
   rear_offset: 0.2 # for type "two_circles"
   rear_radius: 0.2 # for type "two_circles"
  #  vertices: [ [-0.15, -0.38], [-0.15, 0.38], [0.85, 0.38], [0.85, -0.38] ] # for type "polygon"
   vertices: [ [-0.15, -0.38], [-0.15, 0.38], [1.1, 0.38], [1.0, -0.38] ] # for type "polygon"
 # GoalTolerance
    
 xy_goal_tolerance: 0.3  #目标位置跟踪误差
 yaw_goal_tolerance: 0.3  #目标姿态跟踪误差
 free_goal_vel: False #设为False时，车辆到达终点时的目标速度为0。我们已经指出，TEB是时间最优规划器。
 #缺少目标速度约束将导致车辆“全速冲线”，即使前方有一堵墙也是如此（因为撞墙的时刻不在规划器考虑范围内了）。
 complete_global_plan: True
    
 # Obstacles
    
 min_obstacle_dist: 0.4  #
 # This value must also include our robot's expansion, since footprint_model is set to "line".
# 和障碍物最小距离。若设置了车辆的轮廓，则不建议使用此参数。使用车辆轮廓配置footprint_model
# 配合膨胀距离即可实现较好效果。障碍物惩罚权重很高，TEB不会违背这一最小距离约束，因此会把可
# 以通过的缝隙视作不能通过，并终止运行。请注意，此处设置的机器人轮廓必须与局部耗费地图中的一
# 致，后文将继续讨论。

 inflation_dist: 0.6 # 障碍物膨胀距离，惩罚成本不为零的障碍物周围的缓冲区（应大于min_obstacle_dist才能生效) [0.0,0.6,15.0]
# 障碍物膨胀距离。此膨胀只是降低通过这些区域的优先级，不应当用此距离迫使车辆远离障碍物。
 dynamic_obstacle_inflation_dist: 0.6  # 动态障碍物的膨胀范围，动态障碍物的预测位置周围的缓冲区的惩罚成本非零（应大于min_obstacle_dist才能生效） [0.0,0.6,15.0]

 include_costmap_obstacles: True  # 必须设置为True后才能规避实时探测到的、建图时不存在的障碍物。

 costmap_obstacles_behind_robot_dist: 1.0  # 限制在机器人后面规划时考虑到的占用的本地成本图障碍(指定距离，单位为米) [0.0, 1.5,  20.0]
##################


 obstacle_poses_affected: 15


 include_dynamic_obstacles: True 

 costmap_converter_plugin: ""
 costmap_converter_spin_thread: True
 costmap_converter_rate: 5   # 5Hz

 # Optimization


# 对于权重配置，介绍以下几种策略：

# 提高penalty_epsilon。此项为速度等约束提供类似膨胀层的缓冲效果。接近限速将产生一定的惩罚值。
# 大幅提高weight_optimaltime（最优时间权重）。提高至3-5时，车辆在直道上快速加速，并靠近路径边缘沿切线过弯。
# 大幅降低weight_optimaltime，设置较大的inflation_dist，并稍微增加weight_inflation。时间权重降低至0.3以下时，车辆速度明显平稳，不会向最高速度加速。膨胀距离大时将远离障碍物行驶。
# 大幅增加weight_kinematics_forward_drive（>100），禁止规划倒车。如仍规划倒车，说明找不到可行的前向行驶路径。若路径确实存在，可以检查转弯半径、各种footprint是否正确，膨胀层是否合理。
    
 no_inner_iterations: 5  # 被外循环调用后内循环执行优化次数 [1, 5,  100]
 no_outer_iterations: 4   # 执行的外循环的优化次数 [1,  4,  100]
 optimization_activate: True    # 激活优化
 optimization_verbose: False   # 打印优化过程详情
 penalty_epsilon: 0.1   # 对于硬约束近似，在惩罚函数中添加安全范围 [0.0,  1.0,  1.0]
 obstacle_cost_exponent: 4
 weight_max_vel_x: 2
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000  # 满足非完整运动学的优化权值 [0.0, 1000.0, 10000.0]
 weight_kinematics_forward_drive: 1000 # 优化过程中，迫使机器人只选择前进方向，差速轮适用  [0.0,  1.0,  1000.0]
 weight_kinematics_turning_radius: 1    # 优化过程中，车型机器人的最小转弯半径的权重 [0.0,  1.0,  1000.0]
 weight_optimaltime: 1 # must be > 0
 weight_shortest_path: 0
 weight_obstacle: 100       # 优化过程中，和障碍物最小距离的权重 [0.0,  50.0, 1000.0]
 weight_inflation: 0.2      # 优化过程中， 膨胀区的权重 [0.0, 0.1,  10.0]
 weight_dynamic_obstacle: 10 # not in use yet
 weight_dynamic_obstacle_inflation: 0.2
 weight_viapoint: 1
 weight_adapt_factor: 2       # [1, 100]

 # Homotopy Class Planner

 enable_homotopy_class_planning: False   # 拓扑规划多条路径,择优,耗时
 enable_multithreading: True
 max_number_classes: 4
 selection_cost_hysteresis: 1.0       # [0.0, 2.0]
 selection_prefer_initial_plan: 0.95  # [0.0, 1.0]
 selection_obst_cost_scale: 1.0       # [0.0, 1000.0]
 selection_alternative_time_cost: False

 roadmap_graph_no_samples: 15
 roadmap_graph_area_width: 5
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.5
 h_signature_threshold: 0.1
 obstacle_heading_threshold: 0.45
 switching_blocking_period: 0.0
 viapoints_all_candidates: True
 delete_detours_backwards: True
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: False
 visualize_with_time_as_z_axis_scale: False

# Recovery
 
 shrink_horizon_backup: False  # True   当规划器检测到系统异常，允许缩小时域规划范围
 shrink_horizon_min_duration: 10
 oscillation_recovery: True       # 尝试检测和解决振荡，尝试检测并解决相同等价类中多个解决方案之间的振荡（机器人经常在左/右/前/后退之间切换）。
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10

# 恢复措施可以尝试将卡在杂物中的机器人或路径规划错误的机器人恢复至正常状态。
# TEB Local Planner实现了由move_base规定的振荡恢复方法。但是，实测中
# 控制器将高频率振荡速度指令（>10Hz），读者应当评估自己的电动机能否承受。
# （可在 move_base配置中关闭）

# TEB提供路径规划不可行（plan not feasible）时的恢复措施，称为shrink horizon backup。
# 此时TEB将以更近的点作为规划目标，尝试重新规划出可行路径。调试时可关闭，以在可视化界面上观察原出错路径。

